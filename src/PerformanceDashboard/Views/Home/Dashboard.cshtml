<div class="header">
    <h1 data-bind="text: $root.ProjectName + ' Performance Dashboard'"></h1>
</div>
<div class="content relative">
    <div class="relative chart">
        <div class="row">
            <div class="label col-md-4">
                <div class="filter row">
                    <div class="col-md-5 align-self-center">
                        <label>Select Test Configuration</label>
                    </div>
                    <div class="col-md-7">
                        <select data-bind="foreach: Configurations" class="form-control" id="configurationsDropdown" onchange="changeConfiguration();filterFunction();">
                            <option data-bind="value: Id, text: Name"></option>
                        </select>
                    </div>
                </div>
                <div class="filter row">
                    <div class="col-md-5 align-self-center">
                        <label>Select Test Scenario</label>
                    </div>
                    <div class="col-md-7">
                        <select class="form-control" id="scenariosDropdown" onchange="changeScenario();filterFunction();">
                            <option value="All">All</option>
                            <!-- ko foreach: Scenarios -->
                            <option data-bind="value: Name, text: Name"></option>
                            <!-- /ko -->
                        </select>
                    </div>
                </div>
                <div class="filter row">
                    <div class="col-md-5">
                        <label>Max. Results To Show</label>
                    </div>
                    <div class="col-md-7">
                        <select class="form-control" id="maxResults" onchange="updateMaxShownResults();">
                            <option value="5">5</option>
                            <option value="10">10</option>
                            <option value="15">15</option>
                            <option value="20">20</option>
                            <option value="30">30</option>
                        </select>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <fieldset class="border">
                    <legend class="w-auto">Test Result Labels</legend>
                    <table>
                        <tr>
                            <td align="center" width="50" style='background-color: #ff8454;border: 1px solid #000000;font-size: 8pt;font-family:Arial'>FAILED</td>
                            <td style='font-size: 8pt;font-family:Arial'>Reference Value > Latest Value*Tolerance</td>
                            <td align="center" width="50" style='background-color: #ffbd9a;border: 1px solid #000000;font-size: 8pt;font-family:Arial'>%XX&#8600 </td>
                            <td style='font-size: 8pt;font-family:Arial'>Perf Decrease=> Variance>Tolerance</td>
                            <th width="80" align="right" style='font-size: 8pt;font-family:Arial'>Tolerance Values:</th>
                            <td width="80" style='font-size: 8pt;font-family:Arial'>If 2 > Latest Value        : %40</td>
                        </tr>
                        <tr>
                            <td align="center" width="50" style='background-color: #78ff00;border: 1px solid #000000;font-size: 8pt;font-family:Arial'> PASS </td>
                            <td style='font-size: 8pt;font-family:Arial'>Latest Value*Tolerance> Reference Value</td>
                            <td align="center" width="50" style='background-color: #e3ffd5;border: 1px solid #000000;font-size: 8pt;font-family:Arial'>%XX&#8599 </td>
                            <td style='font-size: 8pt;font-family:Arial'>Perf Increase => Variance>Tolerance</td>
                            <td></td>
                            <td style='font-size: 8pt;font-family:Arial'>If 10 => LatestValue > 2   : %30</td>
                        </tr>
                        <tr>
                            <td align="center" width="50" style='background-color: #feff0e;border: 1px solid #000000;font-size: 8pt;font-family:Arial'> OK </td>
                            <td style='font-size: 8pt;font-family:Arial'> Latest Value / Tolerance> Reference Value > Latest Value * Tolerance </td>
                            <td align="center" width="50" style='border: 1px solid #000000;font-size: 8pt;font-family:Arial'>% XX </td>
                            <td style='font-size: 8pt;font-family:Arial'> Tolerance>Variance </td>
                            <td></td>
                            <td style='font-size: 8pt;font-family:Arial'>If 20 >= LatestValue > 10  : %20</td>
                        </tr>
                        <tr>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td style='font-size: 8pt;font-family:Arial'>If LatestValue > 20        : %10</td>
                        </tr>
                    </table>
                </fieldset>
            </div>
        </div>

        <div id="curve_chart"></div>
    </div>

    <div class="relative">
        <div class="table-filters">
            <label>Filter Scenario Names:</label>
            <input type="text" id="scenarioFilter" onkeyup="filterFunction()" placeholder="Search for Scenario Names..">
            <input type="checkbox" id="perfIncrease" onclick="perfIncFilter()" name="perfIncrease" value="Perf">
            <label for="perfIncrease">Perf. Increase</label>
            <input type="checkbox" id="perfDecrease" onclick="perfDecFilter()" name="perfDecrease" value="Perf2">
            <label for="perfDecrease">Perf. Decrease</label>
            <button type="button" class="btn btn-info" onclick="clearFunction()">Clear</button>
        </div>
        <table class='text-center' cellpadding='2' id='myTable' style='border: 1px solid #000000;font-size: 8pt;font-family:Arial'>
            <tr class="e">
                <th style='background-color: #B8DBFD;border: 1px solid #000000'>Scenario Name</th>
                <th style='background-color: #B8DBFD;border: 1px solid #000000'>Reference Values (sec)</th>
                <th style='background-color: #B8DBFD;border: 1px solid #000000'>Perf Comp: Latest VS PreviousExe</th>
                <th style='background-color: #B8DBFD;border: 1px solid #000000'>Latest Result vs Reference</th>
                <!-- ko foreach: TestRuns -->
                <th width="80" style='background-color: #B8DBFD;border: 1px solid #000000' data-bind="text: $index() === 0 ? 'Latest Results'+': '+moment(Key).format('DD.MM.YYYY') : 'Test Date'+': '+moment(Key).format('DD.MM.YYYY')"></th>
                <!-- /ko -->
            </tr>

            <!-- ko foreach: Scenarios -->
            <tr class="e">
                <th class="text-left" width="250" align="left" style='border: 1px solid #000000' data-bind="text: Name"></th>
                <th bgcolor="#ffff00" align="center" width="80" style='background-color: #ffe135;border: 1px solid #000000' data-bind="text: KPI"></th>
                <th align="center" width="80" data-bind="style: { backgroundColor: PercentageChangeIndicatorColor, border: '1px solid #000000' }, text: PercentageChange + '% ' + ChangeDirection"></th>
                <th align="center" width="80" data-bind="style: { backgroundColor: LastRunIndicatorColor, border: '1px solid #000000' }, text: LastRunStatus === 0 ? 'PASS' : LastRunStatus === 1 ? 'FAIL' : 'OK'"></th>
                <!-- ko foreach: $root.TestRuns -->
                <!-- ko let: { testRunForThisScenario: getTestRunForScenario(Value, $parent.Name) } -->
                <!-- ko if: $index() === 0 -->
                <th align="center" width="80" style='background-color: #feffc1;border: 1px solid #000000' data-bind="text: testRunForThisScenario.Result"></th>
                <!-- /ko -->
                <!-- ko if: $index() !== 0 -->
                <td align="center" width="80" style='border: 1px solid #000000' data-bind="text: testRunForThisScenario.Result"></td>
                <!-- /ko -->
                <!-- /ko -->
                <!-- /ko -->
            </tr>
            <!-- /ko -->
        </table>
    </div>
</div>


@section scripts {
    <script type="text/javascript">
        var dashboardViewModel = new Object();
        var chartElement;

        $(document).ready(function () {
            chartElement = document.getElementById('curve_chart');
            ko.options.deferUpdates = true;
            setChartLoadingStatus(true);
            $.getJSON("@Url.Action("GetConfigurationData", "Home")", function (data) {

                // pre-select configured days to show setting
                $(`#maxResults option[value="${data.MaxResultsToShow}"]`).prop('selected', true);

                // fill up dashboard data
                dashboardViewModel = {
                    ProjectName: data.ProjectName,
                    Scenarios: ko.observable(data.Scenarios),
                    Configurations: data.Configurations,
                    TestRuns: ko.observable(data.TestRuns)
                }

                // bind observable data
                ko.applyBindings(dashboardViewModel);

                google.charts.load('current', { 'packages': ['corechart'] });
                google.charts.setOnLoadCallback(updateChartOnConfigurationChange);
            });
        });

        /**
         * Utility function for knockout binding. Returns the test run from a list of test runs that belong to given scenario.
         * @@param {Array} testRuns Array of test runs.
         * @@param {string} scenario Scenario name.
         */
        function getTestRunForScenario(testRuns, scenario) {
            var match = ko.utils.arrayFirst(testRuns, function (item) {
                return item.Scenario == scenario;
            });
            return match;
        }

        /**
         * Draws the chart when selected configuration is changed.
         */
        function updateChartOnConfigurationChange() {
            if (dashboardViewModel.Configurations.length === 0) {
                google.visualization.errors.addError(chartElement, "No test configuration data to display.");
                return;
            }

            var configuration = $("#configurationsDropdown option:selected").val();

            if (configuration !== '') {
                drawChart(configuration, "All");
            }
        }

        /**
         * Draws the chart when selected scenario is changed.
         */
        function updateChartOnScenarioChange() {
            setChartLoadingStatus(true);
            var configuration = $("#configurationsDropdown option:selected").val();
            var scenarioDropDown = document.getElementById("scenariosDropdown");
            var selIndex = scenarioDropDown.selectedIndex;
            var scenario = scenarioDropDown.options[selIndex].value;
            drawChart(configuration, scenario);
        }

        /**
         * Draws the chart according to given configuration ID and scenario name.
         * @@param {number} configuration ID of the selected configuration.
         * @@param {string} scenario Selected scenario name.
         */
        function drawChart(configuration, scenario) {

            var options = {
                curveType: 'function', legend: {
                    position: 'right'
                },
                hAxis: {
                    textStyle: { fontSize: 12 }
                },
                vAxis: {
                    viewWindow: {
                        min: 0
                    }
                },
                chartArea: {
                    left: 80,
                    top: 50
                },
                pointSize: 5,
                annotations: {
                    textStyle: { fontSize: 12 }
                }
            };
            var chart = new google.visualization.LineChart(chartElement);

            $.ajax({
                url: '@Url.Action("GetChartData", "Home")',
                dataType: "json",
                type: "POST",
                async: true,
                data: { "configurationId": configuration, "scenario": scenario },
                error: function (xhr, status, error) {
                    console.log(error);
                    google.visualization.errors.addError(chartElement, error);
                },
                success: function (data) {
                    PrepareChart(data);
                }
            });

            /**
             * Draws the chart.
             * @@param {Object} data Chart data from the server.
             */
            function PrepareChart(data) {
                var dataArray = [];
                var headers = ['Date'];
                $.each(data.ScenarioNames, function (i, item) {
                    headers.push(item);
                });
                dataArray.push(headers);

                $.each(data.Runs, function (i, run) {
                    var row = [ run.Date ];
                    $.each(run.Results, function (j, result) {
                        row.push(result);
                    });
                    dataArray.push(row);
                });

                var resultIndicesAnnotation = []
                for (var i = 0; i < dataArray[0].length; i++) {
                    resultIndicesAnnotation.push(i)

                    if (i >= 1) {
                        resultIndicesAnnotation.push({
                            sourceColumn: i,
                            type: 'number',
                            role: 'annotation'
                        })
                    }
                }

                var data = google.visualization.arrayToDataTable(dataArray);
                var view = new google.visualization.DataView(data);
                view.setColumns(resultIndicesAnnotation);
                setChartLoadingStatus(false);
                chart.draw(view, options);
            }
        }

        /**
         * Call to reload the chart & results table when configuration selection is changed.
         */
        function changeConfiguration() {
            setChartLoadingStatus(true);
            document.getElementById("scenarioFilter").value = '';
            google.charts.setOnLoadCallback(updateChartOnConfigurationChange);

            var configuration = $("#configurationsDropdown option:selected").val();
            $.getJSON("@Url.Action("GetConfigurationData", "Home")", { "configurationId": configuration }, function (data) {
                setChartLoadingStatus(false);
                dashboardViewModel.Scenarios(data.Scenarios);
                dashboardViewModel.TestRuns(data.TestRuns);
            });
        }

        /**
         * Call to reload the chart when scenario selection is changed.
         */
        function changeScenario() {
            document.getElementById("scenarioFilter").value = '';
            google.charts.setOnLoadCallback(updateChartOnScenarioChange);
        }

        /**
         * Updates the count of shown results server & client side.
         */
        function updateMaxShownResults() {
            var resultsToShow = $("#maxResults option:selected").val();

            $.ajax({
                url: '@Url.Action("SetMaxDaysToShow", "Home")',
                dataType: "json",
                type: "POST",
                async: true,
                data: { "daysToShow": resultsToShow },
                error: function (xhr, status, error) {
                    console.log(error);
                },
                success: function () {
                    changeConfiguration();
                }
            });
        }

        /**
         * Displays a spinner while the chart is loading, or removes it.
         * @@param {Boolean} isLoading Set this to true in order to display a spinner. Set it to false to remove any existing spinner.
         */
        function setChartLoadingStatus(isLoading) {
            if (isLoading) {
                $('#curve_chart div').remove();
                $('#curve_chart').removeClass('loaded');
                $('#curve_chart').append("<div class=\"vertical-center\"><div class=\"spinner-grow m-5\" style=\"width: 3rem; height: 3rem;\" role=\"status\"><span class=\"sr-only\"></span></div></div>");
            } else {
                $('#curve_chart div.vertical-center').remove();
                $('#curve_chart').addClass('loaded');
            }
        }
    </script>
}