@using PerformanceDashboard.Model
@model DashboardModel

@{
    ViewBag.Title = $"{Model.ProjectName} Performance Results";
}

<div class="header">
    <h1>@Model.ProjectName Performance Test</h1>
</div>
<div class="relative">
    <h2>@Model.ProjectName Performance Result Trends</h2>
    <p> </p>
</div>
<div class="relative">
    <div class="label">
        <label>Select Test Scenario Trend</label>
        <select style="width: 250px" id="myList" onchange="change();filterFunction();">
            <option value="All">All</option>
            @foreach (Scenario test in Model.Scenarios)
            {
                <option value="@test.Name">@test.Name</option>
            }
        </select>
    </div>
    <div id="curve_chart" style="width: 1900px; height: 600px"></div>
</div>
<div class="fortable">
    <div class="fortable">
        <fieldset style="width:1000px;">
            <legend> Test Result Labels</legend>
            <table>
                <tr>
                    <td align="center" width="50" style='background-color: #ff8454;border: 1px solid #000000;font-size: 8pt;font-family:Arial'>FAILED</td>
                    <td style='font-size: 8pt;font-family:Arial'>Reference Value > Latest Value*Tolerance</td>
                    <td align="center" width="50" style='background-color: #ffbd9a;border: 1px solid #000000;font-size: 8pt;font-family:Arial'>%XX&#8600 </td>
                    <td style='font-size: 8pt;font-family:Arial'>Perf Decrease=> Variance>Tolerance</td>
                    <th width="80" align="right" style='font-size: 8pt;font-family:Arial'>Tolerance Values:</th>
                    <td width="80" style='font-size: 8pt;font-family:Arial'>If 2 > Latest Value        : %40</td>
                </tr>
                <tr>
                    <td align="center" width="50" style='background-color: #78ff00;border: 1px solid #000000;font-size: 8pt;font-family:Arial'> PASS </td>
                    <td style='font-size: 8pt;font-family:Arial'>Latest Value*Tolerance> Reference Value</td>
                    <td align="center" width="50" style='background-color: #e3ffd5;border: 1px solid #000000;font-size: 8pt;font-family:Arial'>%XX&#8599 </td>
                    <td style='font-size: 8pt;font-family:Arial'>Perf Increase => Variance>Tolerance</td>
                    <td></td>
                    <td style='font-size: 8pt;font-family:Arial'>If 10 => LatestValue > 2   : %30</td>
                </tr>
                <tr>
                    <td align="center" width="50" style='background-color: #feff0e;border: 1px solid #000000;font-size: 8pt;font-family:Arial'> OK </td>
                    <td style='font-size: 8pt;font-family:Arial'> Latest Value / Tolerance> Reference Value > Latest Value * Tolerance </td>
                    <td align="center" width="50" style='border: 1px solid #000000;font-size: 8pt;font-family:Arial'>% XX </td>
                    <td style='font-size: 8pt;font-family:Arial'> Tolerance>Variance </td>
                    <td></td>
                    <td style='font-size: 8pt;font-family:Arial'>If 20 >= LatestValue > 10  : %20</td>
                </tr>
                <tr>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td style='font-size: 8pt;font-family:Arial'>If LatestValue > 20        : %10</td>
                </tr>
            </table>
        </fieldset>
    </div>
    <div class="fortable">
        <p></p>
        <p></p>
        <p></p>
        <label>Filter Scenario Names:</label>
        <input type="text" id="myInput" width="80" onkeyup="filterFunction()" placeholder="Search for Scenario Names..">
        <input type="checkbox" id="perfIncrease" onclick="perfIncFilter()" name="perfIncrease" value="Perf">
        <label for="perfIncrease">Perf Increase</label>
        <input type="checkbox" id="perfDecrease" onclick="perfDecFilter()" name="perfDecrease" value="Perf2">
        <label for="perfDecrease">Perf Decrease</label>
        <button type="button" onclick="clearFunction()">Clear</button>
        <p></p>
        <table class='b' cellpadding='2' id='myTable' style='border: 1px solid #000000;font-size: 8pt;font-family:Arial'>
            <tr class="e">
                <th width="80" style='background-color: #B8DBFD;border: 1px solid #000000'>Scenario Name</th>
                <th width="80" style='background-color: #B8DBFD;border: 1px solid #000000'>Reference Values (sec)</th>
                <th width="80" style='background-color: #B8DBFD;border: 1px solid #000000'>Perf Comp: Latest VS PreviousExe</th>
                <th width="80" style='background-color: #B8DBFD;border: 1px solid #000000'>Latest Result vs Reference</th>
                @for (int i = 0; i < Model.TestRuns.Count; i++)
                {
                    <th width="80" style='background-color: #B8DBFD;border: 1px solid #000000'>@(i == 0 ? "Latest Results" : "Test Date"): @Model.TestRuns.ElementAt(i).Key.ToTurkishString()</th>
                }
            </tr>
            @foreach (var scenario in Model.Scenarios)
            {
                <tr class="e">
                    <th width="250" align="left" style='border: 1px solid #000000'>@scenario.Name</th>
                    <th bgcolor="#ffff00" align="center" width="80" style='background-color: #ffe135;border: 1px solid #000000'>@scenario.KPI</th>
                    @{
                        var arrowString = "";
                        switch (scenario.LastTwoRuns.Change.Direction)
                        {
                            case Direction.Better:
                                arrowString = "↗";
                                break;
                            case Direction.Worse:
                                arrowString = "↘";
                                break;
                            case Direction.None:
                            default:
                                break;
                        }

                        var backgroundColor = "";
                        switch (scenario.LastTwoRuns.Change.PerformanceChange)
                        {
                            case PerformanceChange.Decrease:
                                backgroundColor = "#ffbd9a";
                                break;
                            case PerformanceChange.Increase:
                                backgroundColor = "#e3ffd5";
                                break;
                            case PerformanceChange.Horizontal:
                                backgroundColor = "#ffffff";
                                break;
                            default:
                                break;
                        }
                    }
                    <th align="center" width="80" style='background-color: @backgroundColor;border: 1px solid #000000'>@scenario.LastTwoRuns.Change.PercentageChange@arrowString</th>
                    @switch (scenario.LastTwoRuns.LastRunStatus)
                    {
                        case LastRunStatus.Pass:
                            <th align="center" width="80" style='background-color: #78ff00;border: 1px solid #000000'>PASS</th>
                            break;
                        case LastRunStatus.Fail:
                            <th align="center" width="80" style='background-color: #ff8454;border: 1px solid #000000'>FAILED</th>
                            break;
                        case LastRunStatus.OK:
                            <th align="center" width="80" style='background-color: #feff0e;border: 1px solid #000000'>OK</th>
                            break;
                        default:
                            break;
                    }
                    @for (int i = 0; i < Model.TestRuns.Count; i++)
                    {
                        var testRunForThisScenario = Model.TestRuns.ElementAt(i).Value.Where(r => r.ScenarioName.Equals(scenario.Name)).First();
                        if (i == 0)
                        {
                            <th align="center" width="80" style='background-color: #feffc1;border: 1px solid #000000'>@testRunForThisScenario.Result</th>
                        }
                        else
                        {
                            <td align="center" width="80" style='border: 1px solid #000000'>@testRunForThisScenario.Result</td>
                        }
                    }
                </tr>
            }
        </table>
    </div>
</div>

@section scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            google.charts.load('current', { 'packages': ['corechart'] });
            google.charts.setOnLoadCallback(drawChart);
        })

        function drawChart(data) {
            var data = new google.visualization.DataTable();

            var options = {
                curveType: 'function', legend: {
                    position: 'right'
                },
                hAxis: {
                    textStyle: { fontSize: 12 }
                },
                chartArea: {
                    left: 80,
                    top: 50
                },
                pointSize: 5,
                annotations: {
                    textStyle: { fontSize: 12 }
                }
            };
            var chart = new google.visualization.LineChart(document.getElementById('curve_chart'));

            var listbox = document.getElementById("myList");
            var selIndex = listbox.selectedIndex;
            var selValue = listbox.options[selIndex].value;

            $.ajax({
                url: '@Url.Action("GetDataAsync", "Home")',
                dataType: "json",
                type: "POST",
                async: true,
                data: { "selection": selValue },
                error: function (xhr, status, error) {
                    console.log(error);
                },
                success: function (data) {
                    PrepareChart(data);
                }
            });

            function PrepareChart(data) {
                var dataArray = [];
                var headers = ['Date'];
                $.each(data.ScenarioNames, function (i, item) {
                    headers.push(item);
                });
                dataArray.push(headers);

                $.each(data.Runs, function (i, run) {
                    var row = [ run.Date ];
                    $.each(run.Results, function (j, result) {
                        row.push(result);
                    });
                    dataArray.push(row);
                });

                var resultIndicesAnnotation = []
                for (var i = 0; i < dataArray[0].length; i++) {
                    resultIndicesAnnotation.push(i)

                    if (i >= 1) {
                        resultIndicesAnnotation.push({
                            sourceColumn: i,
                            type: 'number',
                            role: 'annotation'
                        })
                    }
                }

                var data = google.visualization.arrayToDataTable(dataArray);
                var view = new google.visualization.DataView(data);
                view.setColumns(resultIndicesAnnotation);
                chart.draw(view, options);
            }
        }

        function change() {
            try { document.getElementById("myInput").value = ''; }
            catch { }
            var listbox = document.getElementById("myList");
            var selIndex = listbox.selectedIndex;
            var selValue = listbox.options[selIndex].value;
            var selText = listbox.options[selIndex].text;
            google.charts.setOnLoadCallback(drawChart);
        }
    </script>
}